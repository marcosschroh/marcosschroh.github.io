<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Marcos Schroh (Posts about ci)</title><link>https://marcosschroh.github.io/</link><description></description><atom:link href="https://marcosschroh.github.io/categories/ci.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:schrohm@gmail.com"&gt;Marcos Schroh&lt;/a&gt; </copyright><lastBuildDate>Sat, 22 Feb 2020 13:29:34 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Continuous Integration with Gitlab</title><link>https://marcosschroh.github.io/posts/autobumping-with-gitlab/</link><dc:creator>Marcos Schroh</dc:creator><description>&lt;div&gt;&lt;p&gt;In this post, I want to talk about how we can automate our integration process using the &lt;code&gt;Gitlab&lt;/code&gt; army tool.
More specifically, how we can create a new release of our software, update the corresponding files that reflects the version, and create a new &lt;code&gt;docker&lt;/code&gt; image.&lt;/p&gt;
&lt;p&gt;For this example, we have a &lt;code&gt;python/django&lt;/code&gt; application and &lt;code&gt;Docker&lt;/code&gt; as containerization tool.&lt;/p&gt;
&lt;h5&gt;Goals:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Bump a new version every time that a change occurs on &lt;code&gt;master&lt;/code&gt; branch. The bump should be executed automatically by the &lt;code&gt;CI&lt;/code&gt; process.&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;docker&lt;/code&gt; image that contains the latest changes and push it to the registry.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Defining a CI Pipeline&lt;/h5&gt;
&lt;p&gt;Starting a &lt;code&gt;CI&lt;/code&gt; process in gitlab is super easy, you just need a &lt;code&gt;.gitlab-ci.yaml&lt;/code&gt; file that contains &lt;code&gt;stages&lt;/code&gt; and &lt;code&gt;jobs&lt;/code&gt; configurations. You can find more info &lt;a href="https://docs.gitlab.com/ee/ci/quick_start/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For our case purpose, we define three &lt;code&gt;stages&lt;/code&gt; with one &lt;code&gt;job&lt;/code&gt; each one.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Test the application.&lt;/li&gt;
&lt;li&gt;Auto bump the version. Means changing the file/s that reflects the version, creating a new commit and git tag.&lt;/li&gt;
&lt;li&gt;Create a new &lt;code&gt;docker&lt;/code&gt; image and publish it in Gitlab registry.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="gitlab variables" src="https://marcosschroh.github.io/gitlab_ci/gitlab_jobs.png"&gt;&lt;/p&gt;
&lt;h5&gt;Assumptions and Development Workflow:&lt;/h5&gt;
&lt;p&gt;Define a clear development workflow is crucial for our goal. It gives a clear vision and a tidy way about how developers should work. We have defined the following the flow and probably you are familiar with it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A developer creates a new commit on any branch (except &lt;code&gt;master&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;A developer creates a merge request (MR) against &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When the &lt;code&gt;MR&lt;/code&gt; is accepted and merged, the 3 stages of the CI are executed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Some Assumptions:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Master branch is protected, means that nobody can push to it, except Gitlab runners.&lt;/li&gt;
&lt;li&gt;The test job runs on every branch when a change is detected.&lt;/li&gt;
&lt;li&gt;We use semantic version.&lt;/li&gt;
&lt;li&gt;For every commit message, we use a convention.&lt;/li&gt;
&lt;li&gt;You can use any tool that you want, in our case we use &lt;a href="https://woile.github.io/commitizen/"&gt;commitizen&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;For simplification, we store the version in a file called &lt;code&gt;VERSION&lt;/code&gt;. You can use any file that you want as &lt;code&gt;commitizen&lt;/code&gt; supports it.&lt;/li&gt;
&lt;li&gt;The commit message executed automatically by the &lt;code&gt;CI&lt;/code&gt; must include &lt;code&gt;[skip-ci]&lt;/code&gt; otherwise the process will be executed in a loop. You can define the message structure in &lt;a href="https://woile.github.io/commitizen/bump/"&gt;commitizen&lt;/a&gt; as well.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;Gitlab Configuration:&lt;/h5&gt;
&lt;p&gt;In order to be able to change files and push new changes with Gitlab runners, we need to have a &lt;code&gt;ssh&lt;/code&gt; key and configure a git user.&lt;/p&gt;
&lt;p&gt;First, let's create a &lt;code&gt;ssh key&lt;/code&gt;. The only requirement is to create it without a passphrase.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -f deploy_key -N ""
&lt;/pre&gt;


&lt;p&gt;The previous command will create a private and public key under the files &lt;code&gt;deploy_key&lt;/code&gt; and &lt;code&gt;deploy_key.pub&lt;/code&gt;. We will use them later.&lt;/p&gt;
&lt;p&gt;For the git user, we need an email and username. You can choose whatever you want, in this example, we choose &lt;code&gt;ci-runner@myproject.com&lt;/code&gt; and &lt;code&gt;admin&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Now, we need to create three environment variables that will be visible for the runners. They should be created in the &lt;code&gt;variables&lt;/code&gt; section under &lt;code&gt;settings/ci_cd&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="gitlab variables" src="https://marcosschroh.github.io/gitlab_ci/gitlab_variables.png"&gt;&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;SSH_PRIVATE_KEY&lt;/code&gt;, &lt;code&gt;CI_EMAIL&lt;/code&gt;, &lt;code&gt;CI_USERNAME&lt;/code&gt; variables and fill them with the &lt;code&gt;private_key&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; that we have created.&lt;/p&gt;
&lt;p&gt;An important thing is to unprotect the private key, otherwise, the CI will raise errors. &lt;/p&gt;
&lt;p&gt;The latest step is to create a &lt;code&gt;deploy key.&lt;/code&gt; To do this, we should create a new one in the section &lt;code&gt;settings/repository&lt;/code&gt; and fill it with the &lt;code&gt;public key&lt;/code&gt; generated before. Check &lt;code&gt;Write access allowed&lt;/code&gt;, otherwise, the runner won't be able to write changes to the repository. &lt;/p&gt;
&lt;p&gt;&lt;img alt="gitlab deploy key" src="https://marcosschroh.github.io/gitlab_ci/gitlab_deploy_key.png"&gt;&lt;/p&gt;
&lt;p&gt;If you have more projects under the same organization, you can reuse the deploy key created before, but you will have to
repeat the step where we created the environment variables (ssh key, email, and username).&lt;/p&gt;
&lt;h5&gt;Start CI pipeline:&lt;/h5&gt;
&lt;p&gt;Let's start with a basic configuration for our pipeline:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker:latest&lt;/span&gt;

&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker:dind&lt;/span&gt;

&lt;span class="nt"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;API_IMAGE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME&lt;/span&gt;

&lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apk add --no-cache py-pip&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install docker-compose&lt;/span&gt;

&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
  &lt;span class="c1"&gt;# - auto-bump # both stages will use later&lt;/span&gt;
  &lt;span class="c1"&gt;# - publish&lt;/span&gt;

&lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose run -e DJANGO_ENVIRONMENT=dev your_project python manage.py test&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;So, every time that a developer push to any branch the test job will be executed. &lt;/p&gt;
&lt;p&gt;Time for the bumping. Below, we are defining a new job to auto bump a new version. The important steps are setting the ssh key, configure git, execute the auto bump command, push to master branch and upload the new version to gitlab artifacts.
See the comments next to each line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;auto-bump&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;auto-bump&lt;/span&gt;
  &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python:3.6&lt;/span&gt;
  &lt;span class="nt"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;'which&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ssh-agent&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;||&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;apt-get&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-qy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;apt-get&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;openssh-client&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-qqy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;)'&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;eval `ssh-agent -s`&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - &amp;gt; /dev/null&lt;/span&gt; &lt;span class="c1"&gt;# add ssh key&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip3 install -U Commitizen&lt;/span&gt; &lt;span class="c1"&gt;# install commitizen&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mkdir -p ~/.ssh&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;chmod 700 ~/.ssh&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "$SSH_PUBLIC_KEY" &amp;gt;&amp;gt; ~/.ssh/id_rsa.pub&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;'[[&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-f&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;/.dockerenv&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;]]&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;echo&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-e&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Host&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*\n\tStrictHostKeyChecking&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;no\n\n"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;~/.ssh/config'&lt;/span&gt;
  &lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote set-url origin git@gitlab.com:discover/rentee-core.git&lt;/span&gt; &lt;span class="c1"&gt;# git configuration&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global user.email "${CI_EMAIL}" &amp;amp;&amp;amp; git config --global user.name "${CI_USERNAME}"&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;'exists=`git&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;show-ref&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;refs/heads/master`&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;if&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-n&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"$exists"&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;];&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;then&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;git&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branch&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;-D&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;master;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;fi'&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git checkout -b master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cz bump&lt;/span&gt; &lt;span class="c1"&gt;# execute auto bump and push to master&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git push origin master:$CI_COMMIT_REF_NAME&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TAG=$(head -n 1 VERSION)&lt;/span&gt; &lt;span class="c1"&gt;# get the new software version and save into artifacts&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "#!/bin/sh" &amp;gt;&amp;gt; variables&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "export TAG='$TAG'" &amp;gt;&amp;gt; variables&lt;/span&gt; 
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git push origin $TAG&lt;/span&gt;
  &lt;span class="nt"&gt;only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
  &lt;span class="nt"&gt;artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;variables&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now, let's add the &lt;code&gt;publish&lt;/code&gt; job to create a new docker image and push it to the registry:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;publish&lt;/span&gt;
  &lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;auto-bump&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;source variables&lt;/span&gt; &lt;span class="c1"&gt;# loading environment variables from artifact&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo $TAG&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;API_IMAGE_TAG="${CI_REGISTRY_IMAGE}:${TAG}"&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker login registry.gitlab.com -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}&lt;/span&gt; &lt;span class="c1"&gt;# Authenticating against registry registry&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker build -t $API_IMAGE_NAME your_project&lt;/span&gt; &lt;span class="c1"&gt;# creating docker image&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker tag $API_IMAGE_NAME $API_IMAGE_TAG&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker push $API_IMAGE_TAG&lt;/span&gt; &lt;span class="c1"&gt;# pushing to docker registry&lt;/span&gt;
  &lt;span class="nt"&gt;only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Because we can not pass variables between jobs, we are using artifacts. You can avoid using &lt;code&gt;artifacts&lt;/code&gt; configuring git again in the latest job, then pull the latest changes that include the last commit that bumps the version or simply combining &lt;code&gt;auto-bumping&lt;/code&gt; and &lt;code&gt;publish&lt;/code&gt; into one job.&lt;/p&gt;
&lt;p&gt;After merging with master we have the final result:&lt;/p&gt;
&lt;p&gt;&lt;img alt="gitlab final ci result" src="https://marcosschroh.github.io/gitlab_ci/gitlab_final_ci_result.png"&gt;&lt;/p&gt;&lt;/div&gt;</description><category>ci</category><category>gitlab</category><guid>https://marcosschroh.github.io/posts/autobumping-with-gitlab/</guid><pubDate>Sun, 28 Apr 2019 15:32:46 GMT</pubDate></item></channel></rss>