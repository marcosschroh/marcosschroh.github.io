{
  "pages": [
    {
      "title": "Continuous Integration with Gitlab",
      "text": "In this post, I want to talk about how we can automate our integration process using the Gitlab army tool.\nMore specifically, how we can create a new release of our software, update the corresponding files that reflects the version, and create a new docker image.\nFor this example, we have a python/django application and Docker as containerization tool.\nGoals:\n\nBump a new version every time that a change occurs on master branch. The bump should be executed automatically by the CI process.\nCreate a new docker image that contains the latest changes and push it to the registry.\n\nDefining a CI Pipeline\nStarting a CI process in gitlab is super easy, you just need a .gitlab-ci.yaml file that contains stages and jobs configurations. You can find more info here.\nFor our case purpose, we define three stages with one job each one.\n\nTest the application.\nAuto bump the version. Means changing the file/s that reflects the version, creating a new commit and git tag.\nCreate a new docker image and publish it in Gitlab registry.\n\n\nAssumptions and Development Workflow:\nDefine a clear development workflow is crucial for our goal. It gives a clear vision and a tidy way about how developers should work. We have defined the following the flow and probably you are familiar with it:\n\nA developer creates a new commit on any branch (except master)\nA developer creates a merge request (MR) against master\nWhen the MR is accepted and merged, the 3 stages of the CI are executed\n\nSome Assumptions:\n\nMaster branch is protected, means that nobody can push to it, except Gitlab runners.\nThe test job runs on every branch when a change is detected.\nWe use semantic version.\nFor every commit message, we use a convention.\nYou can use any tool that you want, in our case we use commitizen \nFor simplification, we store the version in a file called VERSION. You can use any file that you want as commitizen supports it.\n\nGitlab Configuration:\nIn order to be able to change files and push new changes with Gitlab runners, we need to have a ssh key and configure a git user.\nFirst, let's create a ssh key. The only requirement is to create it without a passphrase.\nssh-keygen -f deploy_key -N \"\"\n\n\n\nThe previous command will create a private and public key under the files deploy_key and deploy_key.pub. We will use them later.\nFor the git user, we need an email and username. You can choose whatever you want, in this example, we choose ci-runner@myproject.com and ci-runner respectively.\nNow, we need to create three environment variables that will be visible for the runners. The variables should be created under in the section settings/ci_cd variables:\n\nCreate SSH_PRIVATE_KEY, CI_EMAIL, CI_USERNAME variables and fill them with the private_key, email and username that we have created.\nAn important thing is to unprotect the private key, otherwise, the CI will raise errors. \nThe latest step is to create a deploy key. To do this, we should create a new one in the section settings/repository and fill it with the public key generated before. Check Write access allowed, otherwise, the runner won't be able to write changes to the repository. \n\nIf you have more projects under the same organization, you can reuse the deploy key created before, but you will have to\nrepeat the step where we created the environment variables (ssh key, email, and username).\nStart CI pipeline:\nLet's start with a basic configuration for our pipeline:\nimage: docker:latest\n\nservices:\n  - docker:dind\n\nvariables:\n  API_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME\n\nbefore_script:\n  - apk add --no-cache py-pip\n  - pip install docker-compose\n\nstages:\n  - test\n  # - auto-bump # both stages will use later\n  # - publish\n\ntest:\n  stage: test\n  script:\n    - docker-compose run -e DJANGO_ENVIRONMENT=dev your_project python manage.py test\n\n\n\nSo, every time that a developer push to any branch the test job will be executed. \nTime for the bumping. Below, we are defining a new job to auto bump a new version. The important steps are setting the ssh key, configure git, execute the auto bump command, push to master branch and upload the new version to gitlab artifacts.\nSee the comments next to each line:\nauto-bump:\n  stage: auto-bump\n  image: python:3.6\n  before_script:\n    - 'which ssh-agent || ( apt-get update -qy && apt-get install openssh-client -qqy )'\n    - eval `ssh-agent -s`\n    - echo \"${SSH_PRIVATE_KEY}\" | tr -d '\\r' | ssh-add - > /dev/null # add ssh key\n    - pip3 install -U Commitizen # install commitizen\n    - mkdir -p ~/.ssh\n    - chmod 700 ~/.ssh\n    - echo \"$SSH_PUBLIC_KEY\" >> ~/.ssh/id_rsa.pub\n    - '[[ -f /.dockerenv ]] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'\n  dependencies:\n    - test\n  script:\n    - git remote set-url origin git@gitlab.com:discover/rentee-core.git # git configuration\n    - git config --global user.email \"${CI_EMAIL}\" && git config --global user.name \"${CI_USERNAME}\"\n    - 'exists=`git show-ref refs/heads/master` && if [ -n \"$exists\" ]; then git branch -D master; fi'\n    - git checkout -b master\n    - cz bump # execute auto bump and push to master\n    - git push origin master:$CI_COMMIT_REF_NAME\n    - TAG=$(head -n 1 VERSION) # get the new software version and save into artifacts\n    - echo \"#!/bin/sh\" >> variables\n    - echo \"export TAG='$TAG'\" >> variables \n    - git push origin $TAG\n  only:\n    refs:\n      - master\n  artifacts:\n    paths:\n    - variables\n\n\n\nNow, let's add the publish job to create a new docker image and push it to the registry:\npublish:\n  stage: publish\n  dependencies:\n    - test\n    - auto-bump\n  script:\n    - source variables # loading environment variables from artifact\n    - echo $TAG\n    - API_IMAGE_TAG=\"${CI_REGISTRY_IMAGE}:${TAG}\"\n    - docker login registry.gitlab.com -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} # Authenticating against registry registry\n    - docker build -t $API_IMAGE_NAME your_project # creating docker image\n    - docker tag $API_IMAGE_NAME $API_IMAGE_TAG\n    - docker push $API_IMAGE_TAG # pushing to docker registry\n  only:\n    refs:\n      - master\n\n\n\nBecause we can not pass variables between jobs, we are using artifacts. You can avoid using artifacts configuring git again in the latest job, then pull the latest changes that include the last commit that bumps the version or simply combining auto-bumping and publish into one job.",
      "tags": "ci,gitlab",
      "url": "https://marcosschroh.github.io/posts/autobumping-with-gitlab/"
    },
    {
      "title": "Let's help version controls",
      "text": "As developers sometimes we don't realize the amount of work that a control version has to do in order\nto calculate diffs, so what can we do about it in order to help them and make our teammate's life easier? \nA control version is ...\nAccording to Wikipedia is the management of changes to documents, computer programs, large web sites, and other collections of information. Somehow, these guys have to track and compare every change that we made, crazy eh!\nComplacent comma placement\nLet's imagine that we have the following python list and we are using git as our control version tool:\nmy_list = [\"banana\", \"orange\", \"apple\"]\n\n\n\nWhenever you make a change to the list, it will be hard to tell what was modified by looking\nat git diff. Because of most of the source control system are line-based they have a hard time highlining multiple changes to a single line\nA quick fix is to adopt a code style where you spread out list, dict or set constants across multiple lines,\nso we have one item per line:\nmy_list = [\n    \"banana\",\n    \"orange\",\n    \"apple\"\n]\n\n\n\nNow, is perfectly clear when one item was added, removed or modified using a git diff.\nAs a bonus, let's say that you add anana at the end of the list, you commit but you can not push because you are not\nin the latest version. Make a pull and there is a conflict because your teammate has added pear at the end of the list:\nmy_list = [\n    \"banana\",\n    \"orange\",\n    \"apple\",\n    \"anana\" # <-- missing comma\n    \"pear\"\n]\n\n\n\nSeems really clear here that you have to add a comma after anana to avoid string literal concatenation,\nbut it happened to me a lot of times that I was focused on trying to solve the merge conflict and I forgot the COMMA!!\nJust for a missing comma and we have unexpected results.\nSo, as python developer we can adopt a code style that we place a comma after every item in a list, dict or set constants including the last item to avoid silly mistakes in merge conflicts.\nmy_list = [\n    \"banana\",\n    \"orange\",\n    \"apple\",\n    \"anana\",\n    \"pear\",\n]\n\n\n\nUnfortunately, not always we can do this, for example in json:\n{\n    \"firstName\": \"Foo\",\n    \"lastName\": \"Bar\", // <--  SyntaxError: Unexpected token } in JSON at position ...\n}\n\n\n\nSpace at the end\nWhy are line breaks important?\nVersion control systems are focused on text files; they can track the changes, merge files automatically, or facilitate the process of resolving conflicts. Because of this, line endings are crucial in understanding the content of the file and how to work with the changes (most of them do merges on a line by line basis).\nFor example, Git supports both CR+LF and LF line endings using several configuration options.\nGit's default merge strategy will throw a conflict whenever two branches make changes to adjacent (or the same) lines. This is eminently sensible: when changes are made, neighboring lines are needed to give them context \u2013 simply merging changes when their context has also changed won't always give the desired result.\nLet's imagine that we have a file called foo.txt and we add the word python without an ending line:\nIf run git diff we have the following message:\ndiff --git a/marcosschroh/foo.txt b/marcosschroh/foo.txt\nindex e69de29..d8654aa 100644\n--- a/marcosschroh/foo.txt\n+++ b/marcosschroh/foo.txt\n@@ -0,0 +1 @@\n+python\n\\ No newline at end of file\n\n\n\nSo far so good, we decide to commit and push. After a while, is time to add a new word to our foo file and we write test with a new line at the end. What do you think we will get after running git diff?\ndiff --git a/marcosschroh/foo.txt b/marcosschroh/foo.txt\nindex d8654aa..4215a2c 100644\n--- a/marcosschroh/foo.txt\n+++ b/marcosschroh/foo.txt\n@@ -1 +1,2 @@\n-python\n\\ No newline at end of file\n+python\n+test\n\n\n\nbut why? If I just added the word test and not python? Don't panic, the first line shows up in the diff as modified although there is no visible change because newlines are a control character and therefore don't have a visible representation.\nNow, what would have the output of git diff if we had added a new line at the end of python and after we add the test word?\ndiff --git a/marcosschroh/foo.txt b/marcosschroh/foo.txt\nindex fdc793e..4215a2c 100644\n--- a/marcosschroh/foo.txt\n+++ b/marcosschroh/foo.txt\n@@ -1 +1,2 @@\n python\n+test\n\n\n\nCleaner and easier, right?\nConslusion:\nAdapting smart formattings like spread out list, dict or set constants across multiple lines and adding a comma at the end of\neach item including the last one is easier to maintain and avoid bugs.\nAlways add a new line at the end, it will make life easier to your teammates and for version control tools.",
      "tags": "python",
      "url": "https://marcosschroh.github.io/posts/lets-help-version-controls/"
    },
    {
      "title": "Manage asynchronous errors with React and Formik",
      "text": "In this posts, I want to show you one approach to manage errors when we perform asynchronous actions with React.js\nJust to remember, I am using the architecture that I commented on my previous post Creating your own framework with React\nI've tried several forms libraries in React and one that has accomplished most of the requirements\nis Formik. It does not have several issues, the repository is updated quite often, the community is active, and in my case, It was clear how to use it.\n\u00a0\nArchitecture\nThis is the architecture that I've decided to use:\n\nOne important thing is we have only one reducer (Error Reducer) to store all the errors related to the forms that we have in our project. \nAlso, there is a FieldError component that knows how to show the errors.\nLet's write code:\n\u00a0\nOur Form Smart Component with Formik\nimport React from 'react';\nimport { Field, Formik } from 'formik';\n\nimport FieldError from '../../../components/FieldError';\n\nclass LoginForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.initialValues = {\n      email: '',\n      password: '',\n    };\n  }\n\n  render() {\n    return (\n      <Formik \n        initialValues={this.initialValues}\n        onSubmit={(values, options) => {\n          this.props.handleSubmit(values)\n        }}\n      render={(props) => {\n        return <form onSubmit={props.handleSubmit} >\n          <label htmlFor=\"email\">Email</Label>\n          <input type=\"email\" name=\"email\" id='email'required/>\n\n          <FieldError errors={this.props.errors.email} />\n\n          <label htmlFor=\"password\">Password:</label>\n          <input type=\"password\" name=\"password\" id='password' required/>\n\n          <button type=\"submit\">Login</button>\n        </form>\n      }}\n    />\n    )\n  }\n}\n\nexport default LoginForm\n\n\n\n\u00a0\nOur FieldError component\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass FieldError extends React.Component {\n\n  static propTypes = {\n    errors: PropTypes.array,\n    globalInForm: PropTypes.bool\n  };\n\n  static defaultProps = {\n    errors: [],\n    globalInForm: false\n  }\n\n  render() {\n    let errors = this.props.errors.map((error, key) => (\n      <p className=\"error text-danger\" key={key}>{error}</p>\n    ))\n\n    if (errors.length && this.props.globalInForm){\n      return (\n        <div color=\"danger\">\n          <ul>{errors}</ul>\n        </div>\n      )  \n    }\n\n    return (\n      <div>\n        {errors}\n      </div>\n    )\n  }\n}\n\nexport default FieldError\n\n\n\n\u00a0\nOur Error Reducer\nimport actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  formErrors: [],\n  globalErrros: [],\n  messages: []\n}\n\nexport default function reducer(state=initialState, action) {\n  switch (action.type) {\n\n  case actionTypes.ADD_FORM_ERRORS:\n\n    return {\n        ...state,\n        formErrors: action.payload.errors,\n     }\n\n  case actionTypes.RESET_FORM_ERRORS:\n\n    return {\n        ...state,\n        formErrors: [],\n      } \n\n  default:\n    return state\n  }\n}\n\n\n\n\u00a0\nSagas funtions\nimport { takeEvery } from 'redux-saga';\nimport { call, put } from 'redux-saga/effects';\nimport actionTypes from '../actions/actionTypes';\nimport api from '../../api';\n\nfunction * login(action) {\n  try{\n    const response = yield call(api.login, action.payload.data, );\n    yield put({ type: actionTypes.LOGIN_SUCCESSFUL, payload: response })\n    yield put({ type: actionTypes.RESET_FORM_ERRORS });\n\n  } catch(response) {\n    yield put({ type: actionTypes.ADD_FORM_ERRORS, payload: {errors: response.errors} });\n  }\n}\n\nexport function * userSagas() {\n  yield [\n    takeEvery(actionTypes.LOGIN_REQUESTED, login)\n  ]\n}\n\n\n\n\u00a0\nLinking Error Reducer with our Form and actions\nimport { connect } from 'react-redux'\nimport LoginForm from './components/LoginForm';\nimport { login } from '../../store/actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    errors: state.errorReducer.formErrors\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (data) => {\n      dispatch(login(data))\n    }\n  }\n}\n\nconst LoginContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoginPage)\n\nexport default LoginContainer\n\n\n\n\u00a0\nIn the above code, we can observe that the form component have access to a portion\nof the store (error Reducer), also when the form is submitted the login action is dispatched.\nImportant thngs:\nIs important to know the response format that comes from the server. In our case the expected format is:\n{\n    'field_1': [\n        'error_1', 'error_2'\n    ],\n    'field_2': [\n        'error__1', 'error_2'\n    ]\n}\n\n\n\nSo, our Form will have access to the above error object, and then will pass each array to the\nFieldError component to show them.\n<FieldError errors={this.props.errors.email} />\n\n\n\nIf there is no error in the response, we should clean the reducer because the same reducer\nis used by multiple forms.\nAnother thing is when the user refresh the page, we also should clean the ErrorReducer,\notherwise, the errors will be there and can cause confusion.\n\u00a0\nThe flow:\n\nUser fill the form and press submit (login function is called).\nBecause is an async action, the sagas middleware catch it, and send a request to the backend.\nThe server has responded with an error e.g. 400.\nThe errors are registered in the Error Reducer by sagas.\nThe form is listening to the Error Reducer and have access to it.\nThe errors are shown in the form.\n\n\u00a0\nConclusion:\nShowing async errors is not an easy task in React, but after a clear workflow was established and the structures to play (Reducer and FieldError) have been created\nshowing errors becomes easier. \nAlso, I've seen the approach of creating one Reducer per Form, in our case LoginForm Reducer belongs to the login form, RegistrationForm Reducer to Registration Form, etc. Maybe is a good approach to have a better control of each form but the amount of reducer increase considerably.",
      "tags": "formik,react,redux",
      "url": "https://marcosschroh.github.io/posts/async-errors-in-react-with-formik/"
    },
    {
      "title": "Pyinstamation",
      "text": "What is Pyinstamation?\nPyinstamation is a Python Bot for Instagram. I have developed this project with Santiago Fraire. You can take a look of the source code of Pyinstamation here\nFeatures:\n\nYou can configure however you want the bot.\nWorks in Linux and MacOS.\nWorks in Chrome and Firefox. \nUpload pictures.\nFarm followers with the follow/unfollow technique.\nLike and comment by tags.\nMetrics persisted in db.\nLogging.\nComment generator.\n\nEverything looks great so far, but here, I want to show you about the results I had with this bot. \nI've been running this bot for 5 days in a row, once a day at the same time, and the results were quite good.\nFirst I will show you the configuration I used for teh 5 days:\nusername: yourusername\npassword: yourpassword\nhide_browser: false\nbrowser_type: chrome\n\nposts:\n  search_tags: ['hashtag_1', 'hashtag_2', 'hashtag_3', 'hashtag_4', 'hashtag_5',]\n  ignore_tags: []\n  posts_per_day: 100\n  likes_per_day: 50\n  like_probability: 0.5\n  comments_per_day: 10\n  comment_enabled: true\n  comment_generator: true\n  comment_probability: 0.5\n  custom_comments: []\n  total_to_follow_per_hashtag: 10\n\nfollowers:\n  follow_enable: true\n  min_followers: 0\n  max_followers: 0\n  follow_probability: 0.5\n  ignore_users: []\n  follow_per_day: 50\n  unfollow_followed_users: true\n\n\n\n\u00a0\nAnd here are the results per day:\n\n    \n        \n            Day\n            Likes Given\n            Likes Gain\n            Comments made\n            Comments gained\n            My comments liked\n            Mentions\n            New users following\n            New Followers\n            Users Unfollowed\n        \n    \n    \n        \n            1\n            15\n            4\n            10\n            0\n            1\n            0\n            15\n            13\n            0\n        \n        \n            2\n            19\n            3\n            10\n            0\n            5\n            2\n            23\n            11\n            0\n        \n        \n            3\n            13\n            3\n            10\n            3\n            7\n            2\n            15\n            1\n            15\n        \n        \n            4\n            47\n            15\n            10\n            0\n            1\n            1\n            47\n            20\n            10\n        \n        \n            5\n            46\n            3\n            10\n            0\n            3\n            0\n            10\n            13\n            15\n        \n    \n\n\n\u00a0\nSome numbers:\nNew Followers: 13 + 11 + 1 + 20 + 13 = 58\nNew Users Following: (15 + 23 + 15 + 47 + 10) - (0 + 0 + 15 + 10 + 15) = 70\nIs important to note that we only unfollow the users that have been  followed by the bot\n\u00a0\nOk. So I was wondering whether the bot has achieved its goal or not? Well, my main goal was:\nhave more followers with the follow/unfollow technique\nIf we analize the bot from the goal perpective, we can say that it's working because I have more Followers, actually 47.\nOf course this result also dependes on the configuration that I've set: likes per days, comments, probabilities. etc.\nBut if we define the FR (Follow Rate) as followers/following, that is not good because I'm following more users than before, to be exact 70. \nSo, the FR = 58/70 = 0.8285\nWe have more followers, but at the same time I'm following more users (bad rate) and I can guess that in the most of the cases a person wants to have a lot of followers but with a good rate (following << followers).\nWhen we developed this project, Instagram had a limit of 7500 people that you can follow, so it\u2019s means that if we run this bot indefinetely we can reach this number, but the good thing is that we don\u2019t have any limit about followers.\nLet\u2019s suppose that we start with 100 followers and 100 users following.\nRegarding the results that we had, we can say that:\nFollowers average per running: 58 / 5 = 11.6\nNew Users Following per running:  70 / 5 = 14  \nIf we do some math we can says that:\nI will reach the 7500 limit of user following around: (7500 - 100) / 14 = 528 running\nI will reach the 7500 limit of followers around: (7500 - 100) / 11.6 =  637 running\nSo, I will have a FR = 1 around the running 637.\n\u00a0\n\n\u00a0\nIf everything goes well and I keep running the bot I will have a FR > 1 after the running 637 times.\nProbably is too much time If I run the bot once per day!!!\nConclusion:\nI think the bot has achieved the goal.\nYou will have to wait too much for a good RATE if you run the bot once a day with the same configuration.\nWhat can you do to improve the Rate:\n\nLook at popular hashtags.\nIncrease the amount of comments and likes per day.\nDo not Follow too much people per day\nCreate posts per day.\nIncrease comment and like probability. \nRun the bot multiple times per day.\nAvoid unpopular hashtags\n\nPD: If you have any issue or a new feature request don't hesitate to tell us!!. You can do it on our pyinstamation repo",
      "tags": "bot,python",
      "url": "https://marcosschroh.github.io/posts/pyinstamation/"
    },
    {
      "title": "Testing a Form Wizard in Django",
      "text": "I was writing a couple to tests form my django views and I got stuck with a Form Wizard. I tought.. well I will need to iterate over a form list and make several post as many steps as the wizard has. That assumetion was correct, so I created the data for every form, I create a form loop... and bump, It didn't work.\nreturn handler(request, *args, **kwargs)\nFile \"/home/marcos/.virtualenvs/platformv3/local/lib/python2.7/site-packages/formtools/wizard/views.py\", line 284, in post code='missing_management_form',\nValidationError: [u'ManagementForm data is missing or has been tampered.']\n\n\n\n\u00a0\nIt didn't work because like we can see in the Traceback a wizard also need management_form.\nBasically, I was makeing a post with the data for each form but of course teh Wizard needs to know wich step are you refering to.\nSo, let's go to the real example.\nLet's imagine that these are my Forms.\nclass TicketInfoForm(forms.Form):\n    limit = forms.IntegerField(min_value=1)\n    name = forms.CharField()\n    pub_date = forms.DateTimeField()\n\nclass AddressForm(forms.Form):\n    street_name = forms.CharField()\n    zipcode = forms.CharField()\n    city = forms.CharField()\n    country = forms.CharField()\n\n\n\n\u00a0\nMy views.py file\nfrom django.shortcuts import redirect\n\nfrom formtools.wizard.views import SessionWizardView\n\nfrom .forms import TicketInfoForm, AddressForm\n\nTICKETS_INFO_WIZARD_FORMS = (\n    (\"Ticket Information\", TicketInfoForm),\n    (\"Address\", AddressForm)\n)\n\nclass TicketWizardFormView(SessionWizardView):\n    template_name = 'tickets_info.html'\n\n    def done(self, form_list, **kwargs):\n        ticket_info_form, address_form = form_list\n\n        address = address_form.save(commit=False)\n        address.type = BUYER_ADDRESS\n        address.save()\n\n        tickets_info = tickets_info_form.save(commit=False)\n        tickets_info.user = self.request.user\n        tickets_info.address = address\n        tickets_info.save()        \n\n        return redirect(reverse('tickets_info_list'))\n\n\n\n\u00a0\nMy urls.py file\nfrom django.conf.urls import url, patterns\nfrom django.contrib.auth.decorators import login_required\n\nfrom .views import TicketsWizardFormView, TICKETS_INFO_WIZARD_FORMS\n\nurlpatterns = patterns(\n    ...\n    url(r'tickets-info/request/$', login_required(TicketsWizardFormView.as_view(TICKETS_INFO_WIZARD_FORMS, name='tickets_info_request'),\n)\n\n\n\nThis code is working fine, with to test it we need to add and change some things.\n\nEvery time that we make a POST besides of send the data that each \n   form, we also need to send the current step: [wizard_name]-current_step: [current_step]\nWe need to change the fields name to: [step_name]-[field_name]: [value]\n\nFor example for our TicketsInfo Form:\ndata_tickets_info_form = {\n    'Ticket Information-limit': 10,\n    'Ticket Information-name': 'My first Ticket Info',\n    'Ticket Information-pub_data': '2017-11-30T12:00:00',\n    'ticket_wizard_form_view-current_step': 'Ticket Information'\n}\n\n\n\n\u00a0\nIn the above example we can see that we have added the [current_step] value and each field has the [step_name] prefix.\nNow we are ready to pass our test:\n# test_views.py\n\nfrom django.test import TestCase\n\nfrom django.core.urlresolvers import reverse\n\nfrom django.contrib.auth.models import User\n\n\nclass TestViews(TestCase):\n\n    fixtures = ['users.json']\n\n    def setUp(self):\n        self.client = Client()\n        self.user = User.objects.first()\n\n    def test_ticket_wizard_form(self):\n        name = 'Awesome Tickets'\n        limit = 10\n\n        data_ticket_form = {\n            'Ticket Information-limit': limit,\n            'Ticket Information-name': name,\n            'Ticket Information-pub_data': '2020-11-30T12:00:00',\n            'ticket_wizard_form_view-current_step': 'Ticket Information'\n        }\n\n        data_address_form = {\n            'Address-street_name': 'Isac Newton',\n            'Address-zipcode': '2011NA',\n            'Address-city': 'Pythonic Straat',\n            'Address-country': 'Netherlands',\n            'ticket_wizard_form_view-current_step': 'Address'\n        }\n\n        TICKETS_STEPS_DATA = [data_ticket_form, data_address_form]\n\n        for step, data_step in enumerate(TICKETS_STEPS_DATA, 1):\n            response = self.client.post(reverse('tickets_info_request'), data_step)\n\n            if step == len(TICKETS_STEPS_DATA):\n                # make sure that after the create ticket we are redirected to Ticket List Page\n                self.assertRedirects(response, reverse('tickets_info_list'))\n            else:\n                self.assertEqual(response.status_code, 200)\n\n        # get the ticket\n        TicketInfo.objects.get(\n            name=name,\n            limit=limit,\n            user=self.user\n        )\n\n\n\n\u00a0\nAnd... The test pass :-)\n....................................\n----------------------------------------------------------------------\nRan 36 tests in 5.555s\n\nOK\n\n\n\nConclusion:\nTest a Form Wizard is not so hard as seems at the beginning!!",
      "tags": "python",
      "url": "https://marcosschroh.github.io/posts/testing-a-form-wizard-in-django/"
    },
    {
      "title": "Creating your own framework with React",
      "text": "React\nFirst we should know the basics of React:\n\nIs the view layer. \nBased on components.\nA component must have a render method. The method must return a valid html tag (In React 16 you can return an array).\nEach component can have props and state.\n\n\u00a0\nDifference between state and props:\nProps: props (short for properties) are a Component's configuration, its options if you may. Props are received from above and are immutable as far as the Component which receives them is concerned.\nA Component cannot change its props, but it is responsible for putting together the props of its child Components.\nState: The state starts with a default value when a Component is mounted, and then suffers from mutations in time (mostly generated from user events). It's a [*]serializable representation of one point in time a snapshot.\nA Component manages its own state internally, but besides setting an initial state has no business fiddling with the state of its children. You could say that the state is private.\n[*] We didn't say props are also serializable because it's pretty common to pass down callback functions through props.\nThe state is optional. Since state increases complexity and reduces predictability, a Component without state is preferable. Even though you clearly can't do without state in an interactive app, you should avoid having too many Stateful Components.\n\u00a0\nResume of props ans state\n\n    \n        \n            -\n            Props\n            State\n        \n    \n    \n        \n            Can get initial value from parent Component?\n            Yes\n            Yes\n        \n        \n            Can be changed by parent Component?\n            Yes\n            No\n        \n        \n            Can set default values inside Component?\n            Yes\n            Yes\n        \n        \n            Can change inside Component?\n            No\n            Yes\n        \n        \n            Can set initial value for child Components?\n            Yes\n            Yes\n        \n        \n            Can change in child Components?\n            Yes\n            No\n        \n    \n\n\n\u00a0\nRedux\nRedux is a predictable state container for JavaScript apps.\nIt helps you to write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. You can use Redux together with React, or with any other view library. It is tiny (2kB, including dependencies).\n\u00a0\u00a0\nCreating the framework\n\u00a0\nThe Architecture:\n\n\u00a0\n\n\u00a0\nThe main key here is that exists only one store (one big Javascript object), that can be stored, usually in the local storage. This is a big immutable object . You must be familiar with the concept of immutability in Javascript. You can\u2019t change any value of the store object.\nBasically when something happens you might want to modify part of this big object, but don\u2019t change it, just create a new object, change it, and return it. Where we do this functionality? In a reducer.\nOne big change is that you have to wrap the entire react application in a provider component. The provider component is listening at the store, and when it changes, a react component can be re-rendered.\n\nIn the image we can see how to wrap the Application in the Provider component imported from react-redux.\nSmart Components or Containers: Components that are connected to a portion of the store. They can trigger or fire actions.\nDumb Components: They are just normal components, can receive data as props from smart components.\nThe following piece of code is the LoginPage component. This is a smart component. Maybe you are wondering why\u2026 \n\nWell... because we are connecting it with part of the store, also it can trigger actions. \nActions are just javascript functions that dispatch an action. Actions are listened by reducers. \nIn the image below there is a login function (ES6 arrow function => ). The login receives data and dispatch something\u2026 an action with type equal to LOGIN_REQUESTED\n\nWe can see a couple of things:\nFirst of all we are importing connect. This allows us to connect a react component with the state object (store) and trigger actions. \nThe second is that we are importing a react component (LoginPage) and we are connecting it. So, now the component have access to part of the store (user) and we can trigger actions (login). \nNow inside the LoginPage component we can use this.props.user, because we have access to a part of the store, in this case only the user. Also we can trigger the login action by doing this.props.login(). Then, this is a Smart Component. \nNow the Dumb Component\u2026 and it is the LoginForm component. We are importing it in the LoginPage component. \nIt looks like:\n \nIf you take a look, when the button is clicked, we execute the function handleSubmit, and this function executes this.props.handleSubmit(). Yes, this is a props that was passed from the smart component. In other words, we are triggering the action login() that is listened by a reducer or a middleware.\nIn this case, the login function makes an AJAX request and it is intercepted by sagas middleware (User Sagas): \n\nSometimes actions are intercepted by a middleware. Here is saying: when the action LOGIN_REQUESTED is fired, execute the login generator (make an API call). If the api call was successful, then execute the loginSuccessful generator, that it triggers another action, in this case SET_TOKEN. Finally, the token is set in the reducer. \nThe following piece of code belongs to the user reducer.\n\nBefore dispatching the login action, the store object looks like: \n\nAfter triggering the login() action, the store object looks like:\n\nWe can see how the store has been changed. Of course we have access to the user object in the LoginPage component via this.props.user. We can do cool things like verifying whether the user object has token or not. In case that has one, redirect our visitor to the Home Page, otherwise redirect to the Login Page again.\nThis is how we connect Sagas middleware, the store and the reducers:\n\nWe are exporting the store, and we are using it with the Provider Component. :-). Take a look at the step where I talk about the provider and you can see how we use the store\nA special recommendation is that should have a balance between Smart Components and Dumb Components. You don\u2019t want to have too many smart components because it implies to connect them to the store or a portion of it. At the same time if you have too many dumb components it means that you are passing props everywhere and it can be extremely hard to follow, especially because you can pass data through many levels (component 1-->component 2\u2026.--->component n)\nConclusion\nCreate your own framework with React can be a hard task at the beginning, but if you undestarnd the concept behind that\nyou could replace the differents layers as much as you like according to your needs.\nFor example here I am using Redux for the data layer, but you can go for Flux or MobX. Also, an alternative for redux-sagas is redux-thunk.\nThis world is growing really fast with React, React Native, React VR, so be prepared...",
      "tags": "react,redux",
      "url": "https://marcosschroh.github.io/posts/creating-your-own-framework-with-react/"
    },
    {
      "title": "Static, Class and Abstract Decorators",
      "text": "The first thing that we have to ak ourselves is: What is a Python decorator? Well, in a formal way \u201cA decorator is the name used for a software design pattern. Decorators dynamically alter the functionality of a function, method, or class without having to directly use subclasses or change the source code of the function being decorated\u201d, but my favourite definition is \u201cFactory of functions\u201d. \nThe second thing that we need to know is the concept of bound and unbound methods in Python. Methods in Python are objects too, so in runtime the methods are instantiated and they are bound to a class or an instance of a class.\nStatic Method\nThe best way to understand the concept is with the code:\nClass Car(object):\n    def __init__(self, engine, chassis):\n        self.motor = engine\n        self.chasis = chasis\n\n    def get_total_weight(self, x, y):\n        return x + y\n\n    def  weight(self):\n        return self.get_total_weigth(self.engine.weight, self.chassis.weight)\n\n\n\nThe question is, is this code working?: The answer is yes, but if you take a look at the get_total_weigth method, the first argument is self and we never use it inside. But what is really happen? Well, remember that the methods are object too, so Python create objects related to the methods and bound them to a Car instance, this is the reason why we pass self like first argument. \nSuppose that car is a Car instance, then:\ncar.get_total_weight\nOut[18]: <bound method Car.get_total_weight of <__main__.Car object at 0x7f72d7dbb750>>\n\n\n\nThis is expensive because every time that we instantiate a Car, Python must create new methods objects,  and  we know that we don\u2019t need the \u201cself\u201d reference. So the solution is to use staticmethod. \n@staticmethod    \ndef get_total_weight(x, y):\n       return x + y\n\n\ncar.get_total_weight\nOut[29]: <function __main__.get_total_weight>\n\n\n\nNow we see that the method is not bound to the instance.\nWith this approach we have the following advantages:\nPython doesn\u2019t have to instantiate a bound-method for each Car object.\nWe know that the methods don\u2019t  depend on the internal object state\nIf we have a subclass, we can override the get_total_weight without ovewrite the weight method\nOne thing that we mention is that a method that is decorated with @staticmethod is callable by a class or by an instance.\nREMEMBER: If a method doesn\u2019t use the self reference, it is probably a static method.  \nClass Method\nClass methods are methods that are bound to the class instead of the instance of the class, so in the following code we can see that the get_market method receive cls as first argument. \nClass Car(object):\n    MARKET = \"Onda\"    \n\n    def __init__(self, engine, chassis):\n        self.engine = engine\n        self.chassis = chassis\n\n    @classmethod\n    def car_factory(cls, car_component_list):\n        for engine, chassis in car_component_list:\n            if engine.consumption < 6:\n             yield cls(engine, chassis)\n\ncar_component_list = [(m1, c1), (m2, c2), (m3, c3)]\ncar_list = []\nfor car in Car.car_factory(car_component_list):\n    if car:\n        car_list.append(car)\n\nCar.car_factory\nOut[42]: <bound method type.car_factory of <class '__main__.Car'>>\n\nClass methods are used by \"Factory Methods\" when we need to do special operations and then return an instance of the class,  and to call a method that has been decorated with staticmethod.  \n\n\n\nAbstract Method\nAbstract method are used in inheritance, are defined in a Base Class but are not implemented. See the following example:\nClass BaseCar(object):\n    MARKET = \"Onda\"    \n\n    def __init__(self, engine, chassis):\n        self.engine = engine\n        self.chasis = chasis\n\n    def turn_on(self):\n        raise NotIplementedError\n\n\n\nAny class that inherited from Car must be implement turn_on method, otherwise an exception will be raised.\nOne thing that you should know is that if you forget to implement the method in a subclass an error will be raised when you try to call the method. A solution to this problem is to use the ABC module that is Python provide.\nimport abc\n\nClass BaseCar(object):\n    __metaclass__ = ABCMetaclass\n    MARKET = \"Onda\"\n\n    def __init__(self, engine, chassis):\n        self.engine = engine\n        self.chassis = chassis\n\n    @abc.abstractmethod\n    def turn_on(self):\n        \"\"\"\n        This method should be implemented by the subclass\n        \"\"\"\n\n\n\nNow, if we try to create an instance of BaseCar we have the following error:\nc = BaseCar()\nTypeError: Can't instantiate abstract class BaseCar with abstract methods turn_on\n\n\n\nConclusion:\nIf you have a method and inside it you never use the self reference, probably the method should be decorated with @staticmethod.\nRemember that @classmethod in general is used by \u2018Factory\u2019, and always the first argument must be a reference to the class. We use cls for it. Of course you should use the cls inside the method!!\nA static method can be called by any kind of methods.\nIf you have inheritance and you want to overwrite a method always decorate it with @abc.abstractmethod. It avoid problems.",
      "tags": "python",
      "url": "https://marcosschroh.github.io/posts/static-class-and-abstract-decorators/"
    },
    {
      "title": "About me",
      "text": "Introduction\n        \n        I was born in General Lamadrid, Buenos Aires Argentina. I am a System Engineer graduated at  National Technological University of La Plata, Argentina. I like technologies, computers, open source, web development, math, statistics and PYTHON!\n        \n        \n        I am passionate about learning new things and sharing what I know with others. I believe that effort is the key to success. My hobbies are basketball, running and swimming.\n        \n\n        My experience\n        \n            I worked for three years as a Python and Django developer at Devsar, was a really good time. In 2016 I decided to quit my job and travel around Europe. I met really good people and luckily could got a job in the Netherlands. I worked for one year for Telegraaf Media Groep, one year for LeQuest and currentely I am working for KPN\n        \n\n        What I expect\n        \n        I expect to continue learning, meeting awesome people, have my company and try to share with you some of the experience that I have. If you have any question, don't hesitate to ask!! :-)\n        \n\n        Social",
      "tags": "",
      "url": "https://marcosschroh.github.io/pages/about-me/"
    },
    {
      "title": "Search results",
      "text": "Search results appear here.",
      "tags": "",
      "url": "https://marcosschroh.github.io/pages/search/"
    }
  ]
}